package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"

	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/graph/middleware"
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return []*model.Todo{
		{
			ID:   "1",
			Text: "テスト1",
			Done: false,
			User: &model.User{
				ID:   "1",
				Name: "てすと",
			},
		},
		{
			ID:   "2",
			Text: "テスト2",
			Done: false,
			User: &model.User{
				ID:   "2",
				Name: "てすと2",
			},
		},
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := middleware.GetUser(ctx)
	if user == nil {
		return nil, fmt.Errorf("not found user")
	}
	return &model.User{
		ID:    user.UID,
		Name:  user.DisplayName,
		Email: user.Email,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
