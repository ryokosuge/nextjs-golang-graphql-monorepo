package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/generated/ent"
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/generated/ent/user"
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/middleware"
)

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	auth := middleware.GetUser(ctx)
	user, err := r.client.User.Query().Where(user.FirebaseUUID(auth.UID)).Only(ctx)
	if err != nil && !ent.IsNotFound(err) {
		return nil, err
	}

	var u *ent.User
	if user != nil {
		i := ent.UpdateUserInput{
			FirebaseUUID: &input.FirebaseUUID,
			Name:         &input.Name,
			Email:        &input.Email,
		}
		u, err = r.client.User.UpdateOneID(user.ID).SetInput(i).Save(ctx)
	} else {
		u, err = r.client.User.Create().SetInput(input).Save(ctx)
	}

	return u, err
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	auth := middleware.GetUser(ctx)
	return r.client.User.Query().Where(user.FirebaseUUID(auth.UID)).Only(ctx)
}
