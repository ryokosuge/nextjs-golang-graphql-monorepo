// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/ent/schema"
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/generated/ent/todo"
	"github.com/ryokosuge/nextjs-golang-graphql-monorepo/api/generated/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescText is the schema descriptor for text field.
	todoDescText := todoFields[0].Descriptor()
	// todo.TextValidator is a validator for the "text" field. It is called by the builders before save.
	todo.TextValidator = todoDescText.Validators[0].(func(string) error)
	// todoDescDone is the schema descriptor for done field.
	todoDescDone := todoFields[1].Descriptor()
	// todo.DefaultDone holds the default value on creation for the done field.
	todo.DefaultDone = todoDescDone.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFirebaseUUID is the schema descriptor for firebaseUUID field.
	userDescFirebaseUUID := userFields[0].Descriptor()
	// user.FirebaseUUIDValidator is a validator for the "firebaseUUID" field. It is called by the builders before save.
	user.FirebaseUUIDValidator = userDescFirebaseUUID.Validators[0].(func(string) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
