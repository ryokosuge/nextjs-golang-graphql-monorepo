// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// CreateTodoInput is used for create Todo object.
// Input was generated by ent.
type CreateTodoInput struct {
	// テキスト
	Text string `json:"text"`
	// 完了かどうか
	Done   *bool  `json:"done,omitempty"`
	UserID string `json:"userID"`
}

// CreateUserInput is used for create User object.
// Input was generated by ent.
type CreateUserInput struct {
	// 名前
	Name string `json:"name"`
	// Eメール
	Email   string   `json:"email"`
	TodoIDs []string `json:"todoIDs,omitempty"`
}

// Information about pagination in a connection.
// https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor,omitempty"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor,omitempty"`
}

type Todo struct {
	ID string `json:"id"`
	// テキスト
	Text string `json:"text"`
	// 完了かどうか
	Done bool  `json:"done"`
	User *User `json:"user"`
}

func (Todo) IsNode() {}

// A connection to a list of items.
type TodoConnection struct {
	// A list of edges.
	Edges []*TodoEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// An edge in a connection.
type TodoEdge struct {
	// The item at the end of the edge.
	Node *Todo `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// UpdateTodoInput is used for update Todo object.
// Input was generated by ent.
type UpdateTodoInput struct {
	// テキスト
	Text *string `json:"text,omitempty"`
	// 完了かどうか
	Done   *bool   `json:"done,omitempty"`
	UserID *string `json:"userID,omitempty"`
}

// UpdateUserInput is used for update User object.
// Input was generated by ent.
type UpdateUserInput struct {
	// 名前
	Name *string `json:"name,omitempty"`
	// Eメール
	Email         *string  `json:"email,omitempty"`
	AddTodoIDs    []string `json:"addTodoIDs,omitempty"`
	RemoveTodoIDs []string `json:"removeTodoIDs,omitempty"`
	ClearTodos    *bool    `json:"clearTodos,omitempty"`
}

type User struct {
	ID string `json:"id"`
	// 名前
	Name string `json:"name"`
	// Eメール
	Email string  `json:"email"`
	Todos []*Todo `json:"todos,omitempty"`
}

func (User) IsNode() {}

// A connection to a list of items.
type UserConnection struct {
	// A list of edges.
	Edges []*UserEdge `json:"edges,omitempty"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
	// Identifies the total count of items in the connection.
	TotalCount int `json:"totalCount"`
}

// An edge in a connection.
type UserEdge struct {
	// The item at the end of the edge.
	Node *User `json:"node,omitempty"`
	// A cursor for use in pagination.
	Cursor string `json:"cursor"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
